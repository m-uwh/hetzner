name: Terraform

on:
  push:
    branches:
      - main
  # pull_request:

jobs:
  terraform:
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Vault Secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{vars.VAULT_ADDR}}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/prod/hetzner HCLOUD_TOKEN | TF_VAR_hcloud_token;
            secret/data/prod/hetzner HCLOUD_SSH_ROOT_PRIVATE_KEY | TF_VAR_HCLOUD_SSH_ROOT_PRIVATE_KEY;
            secret/data/prod/hetzner HCLOUD_SSH_ROOT_PUBLIC_KEY | TF_VAR_HCLOUD_SSH_ROOT_PUBLIC_KEY;
            secret/data/prod/hetzner HCLOUD_SSH_WARMICHI_PRIVATE_KEY | TF_VAR_HCLOUD_SSH_WARMICHI_PRIVATE_KEY;
            secret/data/prod/hetzner HCLOUD_SSH_WARMICHI_PUBLIC_KEY | TF_VAR_HCLOUD_SSH_WARMICHI_PUBLIC_KEY;
            secret/data/prod/argocd ARGOCD_VAULT_TOKEN | TF_VAR_ARGOCD_VAULT_TOKEN;
            secret/data/prod/terraform TF_API_TOKEN;
            secret/data/prod/cloudflare/r2/kube-1-terraform-state-prod ACCESS_KEY_ID | TF_VAR_ACCESS_KEY_ID;
            secret/data/prod/cloudflare/r2/kube-1-terraform-state-prod SECRET_ACCESS_KEY| TF_VAR_SECRET_ACCESS_KEY;


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
    
      - name: Terraform Init
        id: init
        run: terraform init
    
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
    
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
    
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
    
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
    
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
    
            </details>
    
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
            <details><summary>Show Plan</summary>
    
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
    
            </details>
    
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
    