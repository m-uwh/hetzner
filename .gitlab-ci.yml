image:
  name: $CI_REGISTRY/warmichi/cloud-provisioner:latest

# Default output file for Terraform plan
variables:
  PLAN: plan.tfplan
  JSON_PLAN_FILE: tfplan.json
  TF_IN_AUTOMATION: "true"
  BOOTSTRAP_KUBE_CLUSTER:
    value: "false"
    description: "decide if the cluster should be bootstrapped."
  SCALE_KUBE_CLUSTER:
    value: "false"
    description: "scale nodes in the cluster."
  UPGRADE_KUBE_CLUSTER:
    value: "false"
    description: "Gracefully upgrade the cluster to the given version "

cache:
  key: "$CI_COMMIT_SHA"
  paths:
    - .terraform

stages:
  - validate
  - plan
  - apply
  - destroy

.install-curl-jq: &install-curl-jq
  - apk add --update curl jq
  - alias convert_report="jq -r '([.resource_changes[].change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"

.gitlab-tf-backend: &gitlab-tf-backend
  - export TF_ADDRESS=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/production
  - export TF_HTTP_ADDRESS=${TF_ADDRESS}
  - export TF_HTTP_LOCK_ADDRESS=${TF_ADDRESS}/lock
  - export TF_HTTP_LOCK_METHOD=POST
  - export TF_HTTP_UNLOCK_ADDRESS=${TF_ADDRESS}/lock
  - export TF_HTTP_UNLOCK_METHOD=DELETE
  - export TF_HTTP_USERNAME=gitlab-ci-token
  - export TF_HTTP_PASSWORD=${CI_JOB_TOKEN}
  - export TF_HTTP_RETRY_WAIT_MIN=5
  - echo "Using HTTP Backend at $TF_HTTP_ADDRESS"
  - terraform --version
  - terraform init -reconfigure
  
.secrets:
  secrets:
    HETZNER_DNS_API_TOKEN:
      vault: infra/prod/hetzner/HETZNER_DNS_API_TOKEN@secret
      file: false 
    TF_VAR_hcloud_token:
      vault: infra/prod/hetzner/HCLOUD_TOKEN@secret
      file: false
    TF_VAR_hcloud_ssh_root_private_key:
      vault: infra/prod/hetzner/HCLOUD_SSH_ROOT_PRIVATE_KEY@secret
    TF_VAR_hcloud_ssh_root_public_key:
      vault: infra/prod/hetzner/HCLOUD_SSH_ROOT_PUBLIC_KEY@secret
      file: false
    TF_VAR_hcloud_ssh_warmichi_private_key:
      vault: infra/prod/hetzner/HCLOUD_SSH_WARMICHI_PRIVATE_KEY@secret
    TF_VAR_hcloud_ssh_warmichi_public_key:
      vault: infra/prod/hetzner/HCLOUD_SSH_WARMICHI_PUBLIC_KEY@secret
      file: false
    TF_VAR_argocd_vault_token:
      vault: infra/prod/argocd/ARGOCD_VAULT_TOKEN@secret
      file: false   

vault ping:
  image:
    name: hashicorp/vault:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  stage: .pre
  script:
    - echo "Check status of $VAULT_SERVER_URL"
    - |
      until vault status
      do
        echo "Vault returned error or sealed"
        sleep 5
      done
  rules:
    - if: '$VAULT_SERVER_URL'
  when: always

validate:
  stage: validate
  extends: .secrets
  script:
    - *gitlab-tf-backend
    - terraform validate
    - terraform fmt -check -diff
  only:
    - branches
    - merge_requests
    
kics-scan:
  image: 
    name: checkmarx/kics:latest-alpine
    entrypoint:
      - '/usr/bin/env'
  stage: validate
  script:
    - kics scan -q /app/bin/assets/queries -p ${PWD} --ignore-on-exit all --report-formats glsast -o ${PWD}
  artifacts:
    reports:
      sast: gl-sast-results.json
    when: always
  allow_failure: true

merge review:
  stage: plan
  extends: 
    - .secrets
    - .install-curl-jq
  script:
    - *gitlab-tf-backend
    - terraform plan -out=$PLAN
    - "terraform show --json $PLAN | convert_report > $JSON_PLAN_FILE"
  artifacts:
    expire_in: 1 week
    name: plan
    reports:
        terraform: $JSON_PLAN_FILE
  only:
    - merge_requests

plan production:
  stage: plan
  extends: .secrets
  script:
    - *gitlab-tf-backend
    - terraform plan
  only:
    - main
  resource_group: production

apply:
  stage: apply
  extends: .secrets
  script:
    - *gitlab-tf-backend
    - chmod 600 $TF_VAR_hcloud_ssh_root_private_key
    - terraform apply -auto-approve
    - DYNAMIC_ENVIRONMENT_URL=$(terraform output -no-color env_dynamic_url)
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
  dependencies:
    - plan production
  artifacts:
    expire_in: 1 week
    name: $CI_COMMIT_REF_SLUG
    reports:
      dotenv: deploy.env
    paths:
      - inventory
  inherit:
    variables: [
      BOOTSTRAP_KUBE_CLUSTER, 
      SCALE_KUBE_CLUSTER, 
      UPGRADE_KUBE_CLUSTER
      ]
  cache:
    key: ansible_inventory_cache
    paths:
      - inventory
  resource_group: production
  environment:
    name: production
    url: $DYNAMIC_ENVIRONMENT_URL
    on_stop: destroy
    auto_stop_in: 12 hours
  only:
    - main
  when: manual

destroy:
  stage: destroy
  needs: []
  extends: .secrets
  script:
    # - *install-curl-jq
    - *gitlab-tf-backend
    - terraform destroy -auto-approve
  when: manual
  only:
    - main  
  environment:
    name: production
    action: stop