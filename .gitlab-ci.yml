include:
  - project: 'warmichi/templates'
    file: '/terraform.gitlab-ci.yml'

variables:
  BOOTSTRAP_KUBE_CLUSTER:
    value: "false"
    description: "decide if the cluster should be bootstrapped."
  SCALE_KUBE_CLUSTER:
    value: "false"
    description: "scale nodes in the cluster."
  UPGRADE_KUBE_CLUSTER:
    value: "false"
    description: "Gracefully upgrade the cluster to the given version "

.secrets:
  secrets:
    HETZNER_DNS_API_TOKEN:
      vault: infra/prod/hetzner/HETZNER_DNS_API_TOKEN@secret
      file: false 
    TF_VAR_hcloud_token:
      vault: infra/prod/hetzner/HCLOUD_TOKEN@secret
      file: false
    TF_VAR_hcloud_ssh_root_private_key:
      vault: infra/prod/hetzner/HCLOUD_SSH_ROOT_PRIVATE_KEY@secret
    TF_VAR_hcloud_ssh_root_public_key:
      vault: infra/prod/hetzner/HCLOUD_SSH_ROOT_PUBLIC_KEY@secret
      file: false
    TF_VAR_hcloud_ssh_warmichi_private_key:
      vault: infra/prod/hetzner/HCLOUD_SSH_WARMICHI_PRIVATE_KEY@secret
    TF_VAR_hcloud_ssh_warmichi_public_key:
      vault: infra/prod/hetzner/HCLOUD_SSH_WARMICHI_PUBLIC_KEY@secret
      file: false
    TF_VAR_argocd_vault_token:
      vault: infra/prod/argocd/ARGOCD_VAULT_TOKEN@secret
      file: false   
      
apply:
  stage: apply
  script:
    - *gitlab-tf-backend
    - chmod 600 $TF_VAR_hcloud_ssh_root_private_key
    - terraform apply -auto-approve
    - DYNAMIC_ENVIRONMENT_URL=$(terraform output -no-color env_dynamic_url)
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
  artifacts:
    paths:
      - inventory
  inherit:
    variables: [
      BOOTSTRAP_KUBE_CLUSTER, 
      SCALE_KUBE_CLUSTER, 
      UPGRADE_KUBE_CLUSTER
      ]
  cache:
    key: ansible_inventory_cache
    paths:
      - inventory
  when: manual
